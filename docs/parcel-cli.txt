CLI

The parcel CLI is the most common way to use Parcel. It supports three different commands: serve ,
watch , and build .
parcel [serve] <entries>

The serve command starts a development server, which will automatically rebuild your app as you
change files, and supports hot reloading (/features/development/#hot-reloading). It accepts one or more
file paths or globs as entries. serve is the default command, so it may also be used by passing entries
directly to parcel .
parcel src/index.html

Note: If you have specified multiple HTML entry points and none of them has the output path
/index.html , the dev server will respond to http://localhost:1234/ with a 404, since
Parcel doesn't know which HTML bundle is the index.
In this case, load the file directly, e.g. http://localhost:1234/a.html and
http://localhost:1234/b.html .

⚠️

See Development (/features/development/) for more details.
parcel watch <entries>

The watch command is similar to serve , but does not start a dev server (only a HMR server). However,
it automatically rebuilds your app as you make changes, and supports hot reloading
(/features/development/#hot-reloading). Use watch if you're building a library, a backend, or have your
own dev (HTTP) server. See below for how to specify entries.
parcel watch src/index.html

parcel build <entries>

The build command performs a single production build and exits. This enables scope hoisting
(/features/scope-hoisting) and other production optimizations by default. See below for how to specify
entries.
parcel build src/index.html

See Production (/features/production/) for more details.

Entries

All Parcel commands accept one or more entries. Entries may be relative or absolute paths, or globs.
They may also be directories containing a package.json with a source field. If entries are omitted
entirely, the source field in the package.json in the current working directory is used. See Entries
(/features/targets/#entries) in the Targets documentation for more details.
Note: Be sure to wrap globs in single quotes to ensure that they are not resolved by your shell
⚠️
and are passed to Parcel directly. This ensures that Parcel can automatically pick up newly
created files matching globs without needing to restart.
# Single file
parcel src/index.html
# Multiple files
parcel src/a.html src/b.html
# Glob (quotes required)
parcel 'src/*.html'
# Directory with package.json#source
parcel packages/frontend
# Multiple packages with a glob
parcel 'packages/*'
# Current directory with package.json#source
parcel

Parameters

These parameters are supported by all Parcel commands.

Format
--target [name]

--dist-dir <dir>

--public-url <url>

--no-source-maps

--config <path>

--reporter <package name>

--log-level
(none/error/warn/info/verbose)
--cache-dir <path>

--no-cache

--profile

--trace
-V, --version

Description
Specifies the targets to build. May be specified multiple
times. See Targets (/features/targets/).
Output directory to write to when unspecified by
targets.
Default value for the distDir
(/features/targets/#distdir) option in package.json
targets .
The path prefix for absolute urls.
Default value for the publicUrl
(/features/targets/#publicurl) option in package.json
targets .
Disables sourcemaps,
Overrides the sourceMap
(/features/targets/#sourcemap) option in package.json
targets .
Specify which Parcel config to use.
Can be a file path or package name. Defaults to
@parcel/config-default . See Parcel configuration
(/features/plugins/).
Run the specified reporter plugin in addition to the ones
specified in the .parcelrc . Can be specified multiple
times.
Sets the log level.
Sets the cache directory. Defaults to .parcel-cache .
See Caching (/features/development/#caching).
Disables reading from the filesystem cache. See
Caching (/features/development/#caching).
Runs a CPU Sampling profile during the build (a
flamechart can be generated).
Runs a trace (/features/profiling) during the build.
Outputs the version number.

Parameters specific to serve and watch
Format
-p, --port
<port>
--host <host>
--https

--cert <path>
--key <path>
--no-hmr
--hmr-port
<port>
--hmr-host
<host>
--noautoinstall
--watch-dir

--watch-forstdin

Description
The port for the dev server and HMR (the default port is process.env.PORT
or 1234). See Dev server (/features/development/#dev-server).
Sets the host to listen on, defaults to listening on all interfaces.
Runs the dev server and HMR server over HTTPS
(/features/development/#https).
Path to a certificate to use. See HTTPS (/features/development/#https).
Path to a private key to use. See HTTPS (/features/development/#https).
Disables hot reloading (/features/development/#hot-reloading).
The port for the HMR server (defaults to the dev server's port). See Hot
reloading (/features/development/#hot-reloading).
The host for the HMR server (defaults to the dev server's host). See Hot
reloading (/features/development/#hot-reloading).
Disables auto install (/features/development/#auto-install).
Set the root watch directory. Useful for monorepos that have lockfiles in subprojects.
Stop Parcel once stdin is closed.

Parameters specific to serve
Format
--open
[browser]
--lazy

Description
Automatically opens the entry in your browser. Defaults to the default browser.
See Dev server (/features/development/#dev-server).
Only builds bundles requested by the dev server. See Lazy mode
(/features/development/#lazy-mode).

Parameters specific to build
Format
--no-optimize

--no-scopehoist

--no-contenthash

--detailedreport [depth]

Description
Disables optimizations such as minification.
Overrides the optimize (/features/targets/#optimize) option of
package.json targets . See Production (/features/production/).
Disables scope hoisting.
Overrides the scopeHoist (/features/targets/#scopehoist) option of
package.json targets . See Scope hoisting (/features/scope-hoisting/).
Disables content hashing of output file names.
Bundle names may still include hashes, but they will not change on each
build. See Content hashing (/features/production/#content-hashing).
Displays the largest 10 (number configurable with depth ) assets per bundle
in the CLI report. See Detailed report (/features/production/#detailed-report).

Edit this page on GitHub (https://github.com/parcel-bundler/website/blob/v2/./src/features/cli.md)

